{
    "version": 3,
    "checkpoint": {
        "stack": "dev",
        "latest": {
            "manifest": {
                "time": "2019-03-19T00:57:02.370418688-07:00",
                "magic": "10484a8cdf491e982db0cd61c77ceebd9db887d282e029dd992b18630a2c5a32",
                "version": "v0.17.1",
                "plugins": [
                    {
                        "name": "nodejs",
                        "path": "/home/james/go/bin/pulumi-language-nodejs",
                        "type": "language",
                        "version": ""
                    },
                    {
                        "name": "kubernetes",
                        "path": "/home/james/.pulumi/plugins/resource-kubernetes-v0.20.1/pulumi-resource-kubernetes",
                        "type": "resource",
                        "version": "0.20.1"
                    },
                    {
                        "name": "pulumi-nodejs",
                        "path": "/home/james/.pulumi/bin/pulumi-resource-pulumi-nodejs",
                        "type": "resource",
                        "version": "0.16.14"
                    }
                ]
            },
            "resources": [
                {
                    "urn": "urn:pulumi:dev::pulumi-ts::pulumi:pulumi:Stack::pulumi-ts-dev",
                    "custom": false,
                    "type": "pulumi:pulumi:Stack",
                    "outputs": {
                        "app": {
                            "name": "my-app",
                            "options": {
                                "port": 3000,
                                "provider": {
                                    "context": "minikube",
                                    "id": "badda941-d453-4953-9755-7288c5fcf073",
                                    "urn": "urn:pulumi:dev::pulumi-ts::pulumi:providers:kubernetes::minikube"
                                },
                                "src": "/home/james/learning-pulumi/pulumi-ts/app"
                            },
                            "urn": "urn:pulumi:dev::pulumi-ts::app::my-app"
                        }
                    }
                },
                {
                    "urn": "urn:pulumi:dev::pulumi-ts::app::my-app",
                    "custom": false,
                    "type": "app",
                    "parent": "urn:pulumi:dev::pulumi-ts::pulumi:pulumi:Stack::pulumi-ts-dev"
                },
                {
                    "urn": "urn:pulumi:dev::pulumi-ts::pulumi:providers:kubernetes::minikube",
                    "custom": true,
                    "id": "badda941-d453-4953-9755-7288c5fcf073",
                    "type": "pulumi:providers:kubernetes",
                    "inputs": {
                        "context": "minikube"
                    },
                    "parent": "urn:pulumi:dev::pulumi-ts::pulumi:pulumi:Stack::pulumi-ts-dev",
                    "propertyDependencies": {
                        "context": null
                    }
                },
                {
                    "urn": "urn:pulumi:dev::pulumi-ts::pulumi:providers:pulumi-nodejs::default",
                    "custom": true,
                    "id": "9ac3afd7-c59d-4069-828c-3f9110b7f362",
                    "type": "pulumi:providers:pulumi-nodejs"
                },
                {
                    "urn": "urn:pulumi:dev::pulumi-ts::pulumi:providers:kubernetes::default",
                    "custom": true,
                    "id": "b6713362-bc02-40a2-b2c4-d1aea3daa11f",
                    "type": "pulumi:providers:kubernetes",
                    "inputs": {
                        "version": "0.20.1"
                    }
                },
                {
                    "urn": "urn:pulumi:dev::pulumi-ts::pulumi-nodejs:dynamic:Resource::my-app-image",
                    "custom": true,
                    "id": "sha256:ab084122ba14b525ad5045bda6fcc8b0307f38290740d9cf550b1b20dc408e13",
                    "type": "pulumi-nodejs:dynamic:Resource",
                    "inputs": {
                        "__provider": "exports.handler = __f0;\n\nvar __provider_proto = {};\n__f1.prototype = __provider_proto;\nObject.defineProperty(__provider_proto, \"constructor\", { configurable: true, writable: true, value: __f1 });\nObject.defineProperty(__provider_proto, \"create\", { configurable: true, writable: true, value: __f2 });\nObject.defineProperty(__provider_proto, \"delete\", { configurable: true, writable: true, value: __f4 });\nvar __provider = Object.create(__provider_proto);\n\nfunction __f1() {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/() { };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f3() {\n  return (function() {\n    with({  }) {\n\nreturn function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __exec() {\n  return (function() {\n    with({ cp: require(\"child_process\"), exec: __exec }) {\n\nreturn function /*exec*/(command, options = { cwd: process.cwd() }) {\n    return new Promise((resolve, reject) =\u003e {\n        cp.exec(command, Object.assign({}, options), (err, stdout, stderr) =\u003e {\n            if (err) {\n                reject(err);\n                return;\n            }\n            resolve({ stdout, stderr });\n        });\n    });\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f2() {\n  return (function() {\n    with({ __awaiter: __f3, exec: __exec }) {\n\nreturn function /*create*/(inputs) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const imageName = inputs.localImageName;\n            const context = inputs.build;\n            const { stdout } = yield exec(`docker build -q -t ${imageName} ${context}`);\n            const imageId = stdout.trim();\n            return {\n                id: stdout.trim(),\n                outs: {\n                    sha: imageId,\n                }\n            };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f4() {\n  return (function() {\n    with({ __awaiter: __f3, exec: __exec }) {\n\nreturn function /*delete*/(id, props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield exec(`docker rmi ${id}`);\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f0() {\n  return (function() {\n    with({ provider: __provider }) {\n\nreturn () =\u003e provider;\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n",
                        "build": "/home/james/learning-pulumi/pulumi-ts/app",
                        "imageName": "my-app",
                        "localImageName": "my-app"
                    },
                    "outputs": {
                        "__provider": "exports.handler = __f0;\n\nvar __provider_proto = {};\n__f1.prototype = __provider_proto;\nObject.defineProperty(__provider_proto, \"constructor\", { configurable: true, writable: true, value: __f1 });\nObject.defineProperty(__provider_proto, \"create\", { configurable: true, writable: true, value: __f2 });\nObject.defineProperty(__provider_proto, \"delete\", { configurable: true, writable: true, value: __f4 });\nvar __provider = Object.create(__provider_proto);\n\nfunction __f1() {\n  return (function() {\n    with({  }) {\n\nreturn function /*constructor*/() { };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f3() {\n  return (function() {\n    with({  }) {\n\nreturn function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __exec() {\n  return (function() {\n    with({ cp: require(\"child_process\"), exec: __exec }) {\n\nreturn function /*exec*/(command, options = { cwd: process.cwd() }) {\n    return new Promise((resolve, reject) =\u003e {\n        cp.exec(command, Object.assign({}, options), (err, stdout, stderr) =\u003e {\n            if (err) {\n                reject(err);\n                return;\n            }\n            resolve({ stdout, stderr });\n        });\n    });\n};\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f2() {\n  return (function() {\n    with({ __awaiter: __f3, exec: __exec }) {\n\nreturn function /*create*/(inputs) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const imageName = inputs.localImageName;\n            const context = inputs.build;\n            const { stdout } = yield exec(`docker build -q -t ${imageName} ${context}`);\n            const imageId = stdout.trim();\n            return {\n                id: stdout.trim(),\n                outs: {\n                    sha: imageId,\n                }\n            };\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f4() {\n  return (function() {\n    with({ __awaiter: __f3, exec: __exec }) {\n\nreturn function /*delete*/(id, props) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield exec(`docker rmi ${id}`);\n        });\n    };\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n\nfunction __f0() {\n  return (function() {\n    with({ provider: __provider }) {\n\nreturn () =\u003e provider;\n\n    }\n  }).apply(undefined, undefined).apply(this, arguments);\n}\n",
                        "sha": "sha256:ab084122ba14b525ad5045bda6fcc8b0307f38290740d9cf550b1b20dc408e13"
                    },
                    "parent": "urn:pulumi:dev::pulumi-ts::pulumi:pulumi:Stack::pulumi-ts-dev",
                    "provider": "urn:pulumi:dev::pulumi-ts::pulumi:providers:pulumi-nodejs::default::9ac3afd7-c59d-4069-828c-3f9110b7f362",
                    "propertyDependencies": {
                        "__provider": null,
                        "build": null,
                        "imageName": null,
                        "localImageName": null
                    }
                },
                {
                    "urn": "urn:pulumi:dev::pulumi-ts::kubernetes:core/v1:Service::my-app-service",
                    "custom": true,
                    "id": "default/my-app",
                    "type": "kubernetes:core/v1:Service",
                    "inputs": {
                        "apiVersion": "v1",
                        "kind": "Service",
                        "metadata": {
                            "labels": {
                                "name": "my-app"
                            },
                            "name": "my-app",
                            "namespace": "default"
                        },
                        "spec": {
                            "ports": [
                                {
                                    "port": 3000,
                                    "targetPort": 3000
                                }
                            ],
                            "selector": {
                                "name": "my-app"
                            },
                            "type": "ClusterIP"
                        }
                    },
                    "outputs": {
                        "__inputs": {
                            "apiVersion": "v1",
                            "kind": "Service",
                            "metadata": {
                                "labels": {
                                    "name": "my-app"
                                },
                                "name": "my-app",
                                "namespace": "default"
                            },
                            "spec": {
                                "ports": [
                                    {
                                        "port": 3000,
                                        "targetPort": 3000
                                    }
                                ],
                                "selector": {
                                    "name": "my-app"
                                },
                                "type": "ClusterIP"
                            }
                        },
                        "apiVersion": "v1",
                        "kind": "Service",
                        "metadata": {
                            "creationTimestamp": "2019-03-19T07:55:24Z",
                            "labels": {
                                "name": "my-app"
                            },
                            "name": "my-app",
                            "namespace": "default",
                            "resourceVersion": "10603",
                            "selfLink": "/api/v1/namespaces/default/services/my-app",
                            "uid": "5a644af0-4a1c-11e9-ba02-000c29997d29"
                        },
                        "spec": {
                            "clusterIP": "10.99.171.74",
                            "ports": [
                                {
                                    "port": 3000,
                                    "protocol": "TCP",
                                    "targetPort": 3000
                                }
                            ],
                            "selector": {
                                "name": "my-app"
                            },
                            "sessionAffinity": "None",
                            "type": "ClusterIP"
                        },
                        "status": {
                            "loadBalancer": {}
                        }
                    },
                    "parent": "urn:pulumi:dev::pulumi-ts::pulumi:pulumi:Stack::pulumi-ts-dev",
                    "provider": "urn:pulumi:dev::pulumi-ts::pulumi:providers:kubernetes::default::b6713362-bc02-40a2-b2c4-d1aea3daa11f",
                    "propertyDependencies": {
                        "apiVersion": null,
                        "kind": null,
                        "metadata": null,
                        "spec": null
                    }
                },
                {
                    "urn": "urn:pulumi:dev::pulumi-ts::app$kubernetes:apps/v1:Deployment::my-app-deployment",
                    "custom": true,
                    "id": "default/my-app",
                    "type": "kubernetes:apps/v1:Deployment",
                    "inputs": {
                        "apiVersion": "apps/v1",
                        "kind": "Deployment",
                        "metadata": {
                            "labels": {
                                "name": "my-app"
                            },
                            "name": "my-app",
                            "namespace": "default"
                        },
                        "spec": {
                            "replicas": 1,
                            "selector": {
                                "matchLabels": {
                                    "name": "my-app"
                                }
                            },
                            "template": {
                                "metadata": {
                                    "labels": {
                                        "name": "my-app"
                                    }
                                },
                                "spec": {
                                    "containers": [
                                        {
                                            "envFrom": [],
                                            "image": "my-app",
                                            "name": "my-app",
                                            "ports": [
                                                {
                                                    "containerPort": 3000
                                                }
                                            ]
                                        }
                                    ]
                                }
                            }
                        }
                    },
                    "outputs": {
                        "__inputs": {
                            "apiVersion": "apps/v1",
                            "kind": "Deployment",
                            "metadata": {
                                "labels": {
                                    "name": "my-app"
                                },
                                "name": "my-app",
                                "namespace": "default"
                            },
                            "spec": {
                                "replicas": 1,
                                "selector": {
                                    "matchLabels": {
                                        "name": "my-app"
                                    }
                                },
                                "template": {
                                    "metadata": {
                                        "labels": {
                                            "name": "my-app"
                                        }
                                    },
                                    "spec": {
                                        "containers": [
                                            {
                                                "envFrom": [],
                                                "image": "my-app",
                                                "name": "my-app",
                                                "ports": [
                                                    {
                                                        "containerPort": 3000
                                                    }
                                                ]
                                            }
                                        ]
                                    }
                                }
                            }
                        },
                        "apiVersion": "extensions/v1beta1",
                        "kind": "Deployment",
                        "metadata": {
                            "annotations": {
                                "deployment.kubernetes.io/revision": "1"
                            },
                            "creationTimestamp": "2019-03-19T07:55:25Z",
                            "generation": 1,
                            "labels": {
                                "name": "my-app"
                            },
                            "name": "my-app",
                            "namespace": "default",
                            "resourceVersion": "10616",
                            "selfLink": "/apis/extensions/v1beta1/namespaces/default/deployments/my-app",
                            "uid": "5ac4ca0f-4a1c-11e9-ba02-000c29997d29"
                        },
                        "spec": {
                            "progressDeadlineSeconds": 600,
                            "replicas": 1,
                            "revisionHistoryLimit": 10,
                            "selector": {
                                "matchLabels": {
                                    "name": "my-app"
                                }
                            },
                            "strategy": {
                                "rollingUpdate": {
                                    "maxSurge": "25%",
                                    "maxUnavailable": "25%"
                                },
                                "type": "RollingUpdate"
                            },
                            "template": {
                                "metadata": {
                                    "labels": {
                                        "name": "my-app"
                                    }
                                },
                                "spec": {
                                    "containers": [
                                        {
                                            "image": "my-app",
                                            "imagePullPolicy": "Always",
                                            "name": "my-app",
                                            "ports": [
                                                {
                                                    "containerPort": 3000,
                                                    "protocol": "TCP"
                                                }
                                            ],
                                            "resources": {},
                                            "terminationMessagePath": "/dev/termination-log",
                                            "terminationMessagePolicy": "File"
                                        }
                                    ],
                                    "dnsPolicy": "ClusterFirst",
                                    "restartPolicy": "Always",
                                    "schedulerName": "default-scheduler",
                                    "securityContext": {},
                                    "terminationGracePeriodSeconds": 30
                                }
                            }
                        },
                        "status": {
                            "conditions": [
                                {
                                    "lastTransitionTime": "2019-03-19T07:55:25Z",
                                    "lastUpdateTime": "2019-03-19T07:55:25Z",
                                    "message": "Deployment does not have minimum availability.",
                                    "reason": "MinimumReplicasUnavailable",
                                    "status": "False",
                                    "type": "Available"
                                },
                                {
                                    "lastTransitionTime": "2019-03-19T07:55:25Z",
                                    "lastUpdateTime": "2019-03-19T07:55:25Z",
                                    "message": "ReplicaSet \"my-app-6b665dc4b9\" is progressing.",
                                    "reason": "ReplicaSetUpdated",
                                    "status": "True",
                                    "type": "Progressing"
                                }
                            ],
                            "observedGeneration": 1,
                            "replicas": 1,
                            "unavailableReplicas": 1,
                            "updatedReplicas": 1
                        }
                    },
                    "parent": "urn:pulumi:dev::pulumi-ts::app::my-app",
                    "dependencies": [
                        "urn:pulumi:dev::pulumi-ts::pulumi-nodejs:dynamic:Resource::my-app-image"
                    ],
                    "initErrors": [
                        "Resource operation was cancelled for 'my-app'",
                        "[MinimumReplicasUnavailable] Deployment does not have minimum availability.",
                        "Minimum number of live Pods was not attained",
                        "1 Pods failed to run because: [ImagePullBackOff] Back-off pulling image \"my-app\""
                    ],
                    "provider": "urn:pulumi:dev::pulumi-ts::pulumi:providers:kubernetes::minikube::badda941-d453-4953-9755-7288c5fcf073",
                    "propertyDependencies": {
                        "apiVersion": null,
                        "kind": null,
                        "metadata": null,
                        "spec": [
                            "urn:pulumi:dev::pulumi-ts::pulumi-nodejs:dynamic:Resource::my-app-image"
                        ]
                    }
                }
            ]
        }
    }
}